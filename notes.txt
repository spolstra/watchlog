
Date now = new Date();
Long longTime = new Long(now.getTime()/1000);

But then avoid Long and use long instead
sam:~/projects/java.examples/examples/TestTime.java


// Create a date from a long.
Date n = new Date();
System.out.println("now + 10 seconds: " + (n.getTime() + 10000)/1000);
System.out.println("now + 10 seconds: " + new Date(n.getTime()));
System.out.println("now + 10 seconds: " + new Date(n.getTime() + 10000));
System.out.println("Formatted: " + DateFormat.getTimeInstance().format(n));
SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
// This is useful for watchlog
System.out.println("simple format: " + sdf.format(n));


Mon Sep 16 22:42:22 CEST 2013
There seem to be a lot of ways to manipulate data from the database before it
displayed in the listview.

1.  Override the CursorAdapter.convertToString method

2. Override the SimpleCursorAdapter.setViewText method:
    SimpleCursorAdapter shows = new SimpleCursorAdapter(this, R.layout.somelayout, accountCursor, from, to)
    {
     @Override
     public void setViewText(TextView v, String text) {
     super.setViewText(v, convText(v, text));
    }    
    };
    
    private String convText(TextView v, String text)
    {
    
     switch (v.getId())
     {
     case R.id.date:
                 String formatedText = text;
                 //do format
                return formatedText;
            }
    return text;
    }


3. set a new ViewBinder with the SimpleCursorAdapter.setViewBinder method:
SimpleCursorAdapter adapter = new SimpleCursorAdapter(this, R.layout.list, cursor,
            new String[] { Definition.Item.TITLE, Definition.Item.CREATE_DATE }, new int[] { R.id.title, R.id.createDate});

adapter.setViewBinder(new ViewBinder() {

    public boolean setViewValue(View aView, Cursor aCursor, int aColumnIndex) {

        if (aColumnIndex == 2) {
                String createDate = aCursor.getString(aColumnIndex);
                TextView textView = (TextView) aView;
                textView.setText("Create date: " + MyFormatterHelper.formatDate(getApplicationContext(), createDate));
                return true;
         }

         return false;
    }
});

The text from SimpleCursorAdapter is useful:
An easy adapter to map columns from a cursor to TextViews or ImageViews defined
in an XML file. You can specify which columns you want, which views you want to
display the columns, and the XML file that defines the appearance of these
views. Binding occurs in two phases. First, if a SimpleCursorAdapter.ViewBinder
is available, setViewValue(android.view.View, android.database.Cursor, int) is
invoked. If the returned value is true, binding has occured. If the returned
value is false and the view to bind is a TextView, setViewText(TextView,
String) is invoked. If the returned value is false and the view to bind is an
ImageView, setViewImage(ImageView, String) is invoked. If no appropriate
binding can be found, an IllegalStateException is thrown. If this adapter is
used with filtering, for instance in an AutoCompleteTextView, you can use the
SimpleCursorAdapter.CursorToStringConverter and the FilterQueryProvider
interfaces to get control over the filtering process. You can refer to
convertToString(android.database.Cursor) and
runQueryOnBackgroundThread(CharSequence) for more information.


I think the best way is to create a
SimpleCursorAdapter.CursorToStringConverter class
And implement convertToString()
set it with:
setCursorToStringConverter()

Simpler: CursorAdapter has the method convertToString() that I can override.

sql query to fill the select table:
select name from watchdata group by name;

speedup?
I/Choreographer( 1985): Skipped 221 frames!  The application may be
doing too much work on its main thread.

